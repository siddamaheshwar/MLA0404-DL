import numpy as np
import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target.reshape(-1, 1)  # Reshape to make it a column vector

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define the model using TensorFlow's Keras API
model = tf.keras.Sequential([
    tf.keras.layers.Dense(10, input_shape=(4,), activation='linear'),  # Hidden layer with linear activation
    tf.keras.layers.Dense(1)  # Output layer (linear activation by default)
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=5, verbose=1)

# Evaluate the model on the test set
loss = model.evaluate(X_test_scaled, y_test)
print("Test Loss:", loss)
